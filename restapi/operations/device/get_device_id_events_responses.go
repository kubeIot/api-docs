package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kubeIoT/api-docs/models"
)

/*GetDeviceIDEventsOK Events for specified device

swagger:response getDeviceIdEventsOK
*/
type GetDeviceIDEventsOK struct {
	/*
	  In: Body
	*/
	Payload []*models.Event `json:"body,omitempty"`
}

// NewGetDeviceIDEventsOK creates GetDeviceIDEventsOK with default headers values
func NewGetDeviceIDEventsOK() *GetDeviceIDEventsOK {
	return &GetDeviceIDEventsOK{}
}

// WithPayload adds the payload to the get device Id events o k response
func (o *GetDeviceIDEventsOK) WithPayload(payload []*models.Event) *GetDeviceIDEventsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get device Id events o k response
func (o *GetDeviceIDEventsOK) SetPayload(payload []*models.Event) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDeviceIDEventsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.Event, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetDeviceIDEventsNotFound Device not found

swagger:response getDeviceIdEventsNotFound
*/
type GetDeviceIDEventsNotFound struct {
	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetDeviceIDEventsNotFound creates GetDeviceIDEventsNotFound with default headers values
func NewGetDeviceIDEventsNotFound() *GetDeviceIDEventsNotFound {
	return &GetDeviceIDEventsNotFound{}
}

// WithPayload adds the payload to the get device Id events not found response
func (o *GetDeviceIDEventsNotFound) WithPayload(payload *models.Error) *GetDeviceIDEventsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get device Id events not found response
func (o *GetDeviceIDEventsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDeviceIDEventsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
