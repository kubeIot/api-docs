package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetDeviceIDCapabilitiesHandlerFunc turns a function with the right signature into a get device ID capabilities handler
type GetDeviceIDCapabilitiesHandlerFunc func(GetDeviceIDCapabilitiesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDeviceIDCapabilitiesHandlerFunc) Handle(params GetDeviceIDCapabilitiesParams) middleware.Responder {
	return fn(params)
}

// GetDeviceIDCapabilitiesHandler interface for that can handle valid get device ID capabilities params
type GetDeviceIDCapabilitiesHandler interface {
	Handle(GetDeviceIDCapabilitiesParams) middleware.Responder
}

// NewGetDeviceIDCapabilities creates a new http.Handler for the get device ID capabilities operation
func NewGetDeviceIDCapabilities(ctx *middleware.Context, handler GetDeviceIDCapabilitiesHandler) *GetDeviceIDCapabilities {
	return &GetDeviceIDCapabilities{Context: ctx, Handler: handler}
}

/*GetDeviceIDCapabilities swagger:route GET /device/{id}/capabilities device getDeviceIdCapabilities

Get capabilities of device

*/
type GetDeviceIDCapabilities struct {
	Context *middleware.Context
	Handler GetDeviceIDCapabilitiesHandler
}

func (o *GetDeviceIDCapabilities) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetDeviceIDCapabilitiesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil {
		// bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
