package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetDeviceIDEventsHandlerFunc turns a function with the right signature into a get device ID events handler
type GetDeviceIDEventsHandlerFunc func(GetDeviceIDEventsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDeviceIDEventsHandlerFunc) Handle(params GetDeviceIDEventsParams) middleware.Responder {
	return fn(params)
}

// GetDeviceIDEventsHandler interface for that can handle valid get device ID events params
type GetDeviceIDEventsHandler interface {
	Handle(GetDeviceIDEventsParams) middleware.Responder
}

// NewGetDeviceIDEvents creates a new http.Handler for the get device ID events operation
func NewGetDeviceIDEvents(ctx *middleware.Context, handler GetDeviceIDEventsHandler) *GetDeviceIDEvents {
	return &GetDeviceIDEvents{Context: ctx, Handler: handler}
}

/*GetDeviceIDEvents swagger:route GET /device/{id}/events device getDeviceIdEvents

GetDeviceIDEvents get device ID events API

*/
type GetDeviceIDEvents struct {
	Context *middleware.Context
	Handler GetDeviceIDEventsHandler
}

func (o *GetDeviceIDEvents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetDeviceIDEventsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil {
		// bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
