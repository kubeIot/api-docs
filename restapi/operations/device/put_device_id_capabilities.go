package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutDeviceIDCapabilitiesHandlerFunc turns a function with the right signature into a put device ID capabilities handler
type PutDeviceIDCapabilitiesHandlerFunc func(PutDeviceIDCapabilitiesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutDeviceIDCapabilitiesHandlerFunc) Handle(params PutDeviceIDCapabilitiesParams) middleware.Responder {
	return fn(params)
}

// PutDeviceIDCapabilitiesHandler interface for that can handle valid put device ID capabilities params
type PutDeviceIDCapabilitiesHandler interface {
	Handle(PutDeviceIDCapabilitiesParams) middleware.Responder
}

// NewPutDeviceIDCapabilities creates a new http.Handler for the put device ID capabilities operation
func NewPutDeviceIDCapabilities(ctx *middleware.Context, handler PutDeviceIDCapabilitiesHandler) *PutDeviceIDCapabilities {
	return &PutDeviceIDCapabilities{Context: ctx, Handler: handler}
}

/*PutDeviceIDCapabilities swagger:route PUT /device/{id}/capabilities device putDeviceIdCapabilities

Update capability of device

*/
type PutDeviceIDCapabilities struct {
	Context *middleware.Context
	Handler PutDeviceIDCapabilitiesHandler
}

func (o *PutDeviceIDCapabilities) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutDeviceIDCapabilitiesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil {
		// bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
