package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutDeviceIDHandlerFunc turns a function with the right signature into a put device ID handler
type PutDeviceIDHandlerFunc func(PutDeviceIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutDeviceIDHandlerFunc) Handle(params PutDeviceIDParams) middleware.Responder {
	return fn(params)
}

// PutDeviceIDHandler interface for that can handle valid put device ID params
type PutDeviceIDHandler interface {
	Handle(PutDeviceIDParams) middleware.Responder
}

// NewPutDeviceID creates a new http.Handler for the put device ID operation
func NewPutDeviceID(ctx *middleware.Context, handler PutDeviceIDHandler) *PutDeviceID {
	return &PutDeviceID{Context: ctx, Handler: handler}
}

/*PutDeviceID swagger:route PUT /device/{id} device putDeviceId

Update selected device

*/
type PutDeviceID struct {
	Context *middleware.Context
	Handler PutDeviceIDHandler
}

func (o *PutDeviceID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutDeviceIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil {
		// bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
