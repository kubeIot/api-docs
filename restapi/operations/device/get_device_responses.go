package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kubeIoT/api-docs/models"
)

/*GetDeviceOK List of all devices

swagger:response getDeviceOK
*/
type GetDeviceOK struct {
	/*
	  In: Body
	*/
	Payload []*models.Device `json:"body,omitempty"`
}

// NewGetDeviceOK creates GetDeviceOK with default headers values
func NewGetDeviceOK() *GetDeviceOK {
	return &GetDeviceOK{}
}

// WithPayload adds the payload to the get device o k response
func (o *GetDeviceOK) WithPayload(payload []*models.Device) *GetDeviceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get device o k response
func (o *GetDeviceOK) SetPayload(payload []*models.Device) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDeviceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.Device, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetDeviceForbidden User is not authorized to list devices

swagger:response getDeviceForbidden
*/
type GetDeviceForbidden struct {
	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetDeviceForbidden creates GetDeviceForbidden with default headers values
func NewGetDeviceForbidden() *GetDeviceForbidden {
	return &GetDeviceForbidden{}
}

// WithPayload adds the payload to the get device forbidden response
func (o *GetDeviceForbidden) WithPayload(payload *models.Error) *GetDeviceForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get device forbidden response
func (o *GetDeviceForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDeviceForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
