package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostDeviceHandlerFunc turns a function with the right signature into a post device handler
type PostDeviceHandlerFunc func(PostDeviceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostDeviceHandlerFunc) Handle(params PostDeviceParams) middleware.Responder {
	return fn(params)
}

// PostDeviceHandler interface for that can handle valid post device params
type PostDeviceHandler interface {
	Handle(PostDeviceParams) middleware.Responder
}

// NewPostDevice creates a new http.Handler for the post device operation
func NewPostDevice(ctx *middleware.Context, handler PostDeviceHandler) *PostDevice {
	return &PostDevice{Context: ctx, Handler: handler}
}

/*PostDevice swagger:route POST /device device postDevice

Creates new device

*/
type PostDevice struct {
	Context *middleware.Context
	Handler PostDeviceHandler
}

func (o *PostDevice) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostDeviceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil {
		// bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
