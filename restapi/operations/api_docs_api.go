package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kubeIoT/api-docs/restapi/operations/application"
	"github.com/kubeIoT/api-docs/restapi/operations/capability"
	"github.com/kubeIoT/api-docs/restapi/operations/device"
	"github.com/kubeIoT/api-docs/restapi/operations/image"
	"github.com/kubeIoT/api-docs/restapi/operations/user"
)

// NewAPIDocsAPI creates a new APIDocs instance
func NewAPIDocsAPI(spec *loads.Document) *APIDocsAPI {
	return &APIDocsAPI{
		handlers:        make(map[string]map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
		ServerShutdown:  func() {},
		spec:            spec,
	}
}

/*APIDocsAPI The definition of RESTful API for kubeIoT platform */
type APIDocsAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// ApplicationDeleteApplicationIDHandler sets the operation handler for the delete application ID operation
	ApplicationDeleteApplicationIDHandler application.DeleteApplicationIDHandler
	// CapabilityDeleteCapabilityIDHandler sets the operation handler for the delete capability ID operation
	CapabilityDeleteCapabilityIDHandler capability.DeleteCapabilityIDHandler
	// DeviceDeleteDeviceIDHandler sets the operation handler for the delete device ID operation
	DeviceDeleteDeviceIDHandler device.DeleteDeviceIDHandler
	// DeviceDeleteDeviceIDCapabilitiesHandler sets the operation handler for the delete device ID capabilities operation
	DeviceDeleteDeviceIDCapabilitiesHandler device.DeleteDeviceIDCapabilitiesHandler
	// ImageDeleteImageIDHandler sets the operation handler for the delete image ID operation
	ImageDeleteImageIDHandler image.DeleteImageIDHandler
	// UserDeleteUserIDHandler sets the operation handler for the delete user ID operation
	UserDeleteUserIDHandler user.DeleteUserIDHandler
	// ApplicationGetApplicationHandler sets the operation handler for the get application operation
	ApplicationGetApplicationHandler application.GetApplicationHandler
	// ApplicationGetApplicationIDHandler sets the operation handler for the get application ID operation
	ApplicationGetApplicationIDHandler application.GetApplicationIDHandler
	// CapabilityGetCapabilityHandler sets the operation handler for the get capability operation
	CapabilityGetCapabilityHandler capability.GetCapabilityHandler
	// CapabilityGetCapabilityIDHandler sets the operation handler for the get capability ID operation
	CapabilityGetCapabilityIDHandler capability.GetCapabilityIDHandler
	// DeviceGetDeviceHandler sets the operation handler for the get device operation
	DeviceGetDeviceHandler device.GetDeviceHandler
	// DeviceGetDeviceIDHandler sets the operation handler for the get device ID operation
	DeviceGetDeviceIDHandler device.GetDeviceIDHandler
	// DeviceGetDeviceIDCapabilitiesHandler sets the operation handler for the get device ID capabilities operation
	DeviceGetDeviceIDCapabilitiesHandler device.GetDeviceIDCapabilitiesHandler
	// DeviceGetDeviceIDEventsHandler sets the operation handler for the get device ID events operation
	DeviceGetDeviceIDEventsHandler device.GetDeviceIDEventsHandler
	// ImageGetImageHandler sets the operation handler for the get image operation
	ImageGetImageHandler image.GetImageHandler
	// ImageGetImageIDHandler sets the operation handler for the get image ID operation
	ImageGetImageIDHandler image.GetImageIDHandler
	// UserGetUserHandler sets the operation handler for the get user operation
	UserGetUserHandler user.GetUserHandler
	// UserGetUserIDHandler sets the operation handler for the get user ID operation
	UserGetUserIDHandler user.GetUserIDHandler
	// ApplicationPostApplicationHandler sets the operation handler for the post application operation
	ApplicationPostApplicationHandler application.PostApplicationHandler
	// CapabilityPostCapabilityHandler sets the operation handler for the post capability operation
	CapabilityPostCapabilityHandler capability.PostCapabilityHandler
	// DevicePostDeviceHandler sets the operation handler for the post device operation
	DevicePostDeviceHandler device.PostDeviceHandler
	// DevicePostDeviceIDCapabilitiesHandler sets the operation handler for the post device ID capabilities operation
	DevicePostDeviceIDCapabilitiesHandler device.PostDeviceIDCapabilitiesHandler
	// ImagePostImageHandler sets the operation handler for the post image operation
	ImagePostImageHandler image.PostImageHandler
	// UserPostUserHandler sets the operation handler for the post user operation
	UserPostUserHandler user.PostUserHandler
	// ApplicationPutApplicationIDHandler sets the operation handler for the put application ID operation
	ApplicationPutApplicationIDHandler application.PutApplicationIDHandler
	// CapabilityPutCapabilityIDHandler sets the operation handler for the put capability ID operation
	CapabilityPutCapabilityIDHandler capability.PutCapabilityIDHandler
	// DevicePutDeviceIDHandler sets the operation handler for the put device ID operation
	DevicePutDeviceIDHandler device.PutDeviceIDHandler
	// DevicePutDeviceIDCapabilitiesHandler sets the operation handler for the put device ID capabilities operation
	DevicePutDeviceIDCapabilitiesHandler device.PutDeviceIDCapabilitiesHandler
	// ImagePutImageIDHandler sets the operation handler for the put image ID operation
	ImagePutImageIDHandler image.PutImageIDHandler
	// UserPutUserIDHandler sets the operation handler for the put user ID operation
	UserPutUserIDHandler user.PutUserIDHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *APIDocsAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *APIDocsAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *APIDocsAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *APIDocsAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *APIDocsAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *APIDocsAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *APIDocsAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the APIDocsAPI
func (o *APIDocsAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.ApplicationDeleteApplicationIDHandler == nil {
		unregistered = append(unregistered, "application.DeleteApplicationIDHandler")
	}

	if o.CapabilityDeleteCapabilityIDHandler == nil {
		unregistered = append(unregistered, "capability.DeleteCapabilityIDHandler")
	}

	if o.DeviceDeleteDeviceIDHandler == nil {
		unregistered = append(unregistered, "device.DeleteDeviceIDHandler")
	}

	if o.DeviceDeleteDeviceIDCapabilitiesHandler == nil {
		unregistered = append(unregistered, "device.DeleteDeviceIDCapabilitiesHandler")
	}

	if o.ImageDeleteImageIDHandler == nil {
		unregistered = append(unregistered, "image.DeleteImageIDHandler")
	}

	if o.UserDeleteUserIDHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserIDHandler")
	}

	if o.ApplicationGetApplicationHandler == nil {
		unregistered = append(unregistered, "application.GetApplicationHandler")
	}

	if o.ApplicationGetApplicationIDHandler == nil {
		unregistered = append(unregistered, "application.GetApplicationIDHandler")
	}

	if o.CapabilityGetCapabilityHandler == nil {
		unregistered = append(unregistered, "capability.GetCapabilityHandler")
	}

	if o.CapabilityGetCapabilityIDHandler == nil {
		unregistered = append(unregistered, "capability.GetCapabilityIDHandler")
	}

	if o.DeviceGetDeviceHandler == nil {
		unregistered = append(unregistered, "device.GetDeviceHandler")
	}

	if o.DeviceGetDeviceIDHandler == nil {
		unregistered = append(unregistered, "device.GetDeviceIDHandler")
	}

	if o.DeviceGetDeviceIDCapabilitiesHandler == nil {
		unregistered = append(unregistered, "device.GetDeviceIDCapabilitiesHandler")
	}

	if o.DeviceGetDeviceIDEventsHandler == nil {
		unregistered = append(unregistered, "device.GetDeviceIDEventsHandler")
	}

	if o.ImageGetImageHandler == nil {
		unregistered = append(unregistered, "image.GetImageHandler")
	}

	if o.ImageGetImageIDHandler == nil {
		unregistered = append(unregistered, "image.GetImageIDHandler")
	}

	if o.UserGetUserHandler == nil {
		unregistered = append(unregistered, "user.GetUserHandler")
	}

	if o.UserGetUserIDHandler == nil {
		unregistered = append(unregistered, "user.GetUserIDHandler")
	}

	if o.ApplicationPostApplicationHandler == nil {
		unregistered = append(unregistered, "application.PostApplicationHandler")
	}

	if o.CapabilityPostCapabilityHandler == nil {
		unregistered = append(unregistered, "capability.PostCapabilityHandler")
	}

	if o.DevicePostDeviceHandler == nil {
		unregistered = append(unregistered, "device.PostDeviceHandler")
	}

	if o.DevicePostDeviceIDCapabilitiesHandler == nil {
		unregistered = append(unregistered, "device.PostDeviceIDCapabilitiesHandler")
	}

	if o.ImagePostImageHandler == nil {
		unregistered = append(unregistered, "image.PostImageHandler")
	}

	if o.UserPostUserHandler == nil {
		unregistered = append(unregistered, "user.PostUserHandler")
	}

	if o.ApplicationPutApplicationIDHandler == nil {
		unregistered = append(unregistered, "application.PutApplicationIDHandler")
	}

	if o.CapabilityPutCapabilityIDHandler == nil {
		unregistered = append(unregistered, "capability.PutCapabilityIDHandler")
	}

	if o.DevicePutDeviceIDHandler == nil {
		unregistered = append(unregistered, "device.PutDeviceIDHandler")
	}

	if o.DevicePutDeviceIDCapabilitiesHandler == nil {
		unregistered = append(unregistered, "device.PutDeviceIDCapabilitiesHandler")
	}

	if o.ImagePutImageIDHandler == nil {
		unregistered = append(unregistered, "image.PutImageIDHandler")
	}

	if o.UserPutUserIDHandler == nil {
		unregistered = append(unregistered, "user.PutUserIDHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *APIDocsAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *APIDocsAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *APIDocsAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *APIDocsAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *APIDocsAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the API docs API
func (o *APIDocsAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *APIDocsAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/application/{id}"] = application.NewDeleteApplicationID(o.context, o.ApplicationDeleteApplicationIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/capability/{id}"] = capability.NewDeleteCapabilityID(o.context, o.CapabilityDeleteCapabilityIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/device/{id}"] = device.NewDeleteDeviceID(o.context, o.DeviceDeleteDeviceIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/device/{id}/capabilities"] = device.NewDeleteDeviceIDCapabilities(o.context, o.DeviceDeleteDeviceIDCapabilitiesHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/image/{id}"] = image.NewDeleteImageID(o.context, o.ImageDeleteImageIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/{id}"] = user.NewDeleteUserID(o.context, o.UserDeleteUserIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/application"] = application.NewGetApplication(o.context, o.ApplicationGetApplicationHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/application/{id}"] = application.NewGetApplicationID(o.context, o.ApplicationGetApplicationIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/capability"] = capability.NewGetCapability(o.context, o.CapabilityGetCapabilityHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/capability/{id}"] = capability.NewGetCapabilityID(o.context, o.CapabilityGetCapabilityIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/device"] = device.NewGetDevice(o.context, o.DeviceGetDeviceHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/device/{id}"] = device.NewGetDeviceID(o.context, o.DeviceGetDeviceIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/device/{id}/capabilities"] = device.NewGetDeviceIDCapabilities(o.context, o.DeviceGetDeviceIDCapabilitiesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/device/{id}/events"] = device.NewGetDeviceIDEvents(o.context, o.DeviceGetDeviceIDEventsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/image"] = image.NewGetImage(o.context, o.ImageGetImageHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/image/{id}"] = image.NewGetImageID(o.context, o.ImageGetImageIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user"] = user.NewGetUser(o.context, o.UserGetUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/{id}"] = user.NewGetUserID(o.context, o.UserGetUserIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/application"] = application.NewPostApplication(o.context, o.ApplicationPostApplicationHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/capability"] = capability.NewPostCapability(o.context, o.CapabilityPostCapabilityHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/device"] = device.NewPostDevice(o.context, o.DevicePostDeviceHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/device/{id}/capabilities"] = device.NewPostDeviceIDCapabilities(o.context, o.DevicePostDeviceIDCapabilitiesHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/image"] = image.NewPostImage(o.context, o.ImagePostImageHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user"] = user.NewPostUser(o.context, o.UserPostUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/application/{id}"] = application.NewPutApplicationID(o.context, o.ApplicationPutApplicationIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/capability/{id}"] = capability.NewPutCapabilityID(o.context, o.CapabilityPutCapabilityIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/device/{id}"] = device.NewPutDeviceID(o.context, o.DevicePutDeviceIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/device/{id}/capabilities"] = device.NewPutDeviceIDCapabilities(o.context, o.DevicePutDeviceIDCapabilitiesHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/image/{id}"] = image.NewPutImageID(o.context, o.ImagePutImageIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/{id}"] = user.NewPutUserID(o.context, o.UserPutUserIDHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *APIDocsAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *APIDocsAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
