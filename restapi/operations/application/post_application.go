package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostApplicationHandlerFunc turns a function with the right signature into a post application handler
type PostApplicationHandlerFunc func(PostApplicationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostApplicationHandlerFunc) Handle(params PostApplicationParams) middleware.Responder {
	return fn(params)
}

// PostApplicationHandler interface for that can handle valid post application params
type PostApplicationHandler interface {
	Handle(PostApplicationParams) middleware.Responder
}

// NewPostApplication creates a new http.Handler for the post application operation
func NewPostApplication(ctx *middleware.Context, handler PostApplicationHandler) *PostApplication {
	return &PostApplication{Context: ctx, Handler: handler}
}

/*PostApplication swagger:route POST /application application postApplication

Creates new application

*/
type PostApplication struct {
	Context *middleware.Context
	Handler PostApplicationHandler
}

func (o *PostApplication) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostApplicationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil {
		// bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
