package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kubeIoT/api-docs/models"
)

/*GetApplicationOK List of all applications

swagger:response getApplicationOK
*/
type GetApplicationOK struct {
	/*
	  In: Body
	*/
	Payload []*models.Application `json:"body,omitempty"`
}

// NewGetApplicationOK creates GetApplicationOK with default headers values
func NewGetApplicationOK() *GetApplicationOK {
	return &GetApplicationOK{}
}

// WithPayload adds the payload to the get application o k response
func (o *GetApplicationOK) WithPayload(payload []*models.Application) *GetApplicationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get application o k response
func (o *GetApplicationOK) SetPayload(payload []*models.Application) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetApplicationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.Application, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetApplicationForbidden User is not authorized to list applications

swagger:response getApplicationForbidden
*/
type GetApplicationForbidden struct {
	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetApplicationForbidden creates GetApplicationForbidden with default headers values
func NewGetApplicationForbidden() *GetApplicationForbidden {
	return &GetApplicationForbidden{}
}

// WithPayload adds the payload to the get application forbidden response
func (o *GetApplicationForbidden) WithPayload(payload *models.Error) *GetApplicationForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get application forbidden response
func (o *GetApplicationForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetApplicationForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
