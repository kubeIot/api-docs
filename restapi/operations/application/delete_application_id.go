package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteApplicationIDHandlerFunc turns a function with the right signature into a delete application ID handler
type DeleteApplicationIDHandlerFunc func(DeleteApplicationIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteApplicationIDHandlerFunc) Handle(params DeleteApplicationIDParams) middleware.Responder {
	return fn(params)
}

// DeleteApplicationIDHandler interface for that can handle valid delete application ID params
type DeleteApplicationIDHandler interface {
	Handle(DeleteApplicationIDParams) middleware.Responder
}

// NewDeleteApplicationID creates a new http.Handler for the delete application ID operation
func NewDeleteApplicationID(ctx *middleware.Context, handler DeleteApplicationIDHandler) *DeleteApplicationID {
	return &DeleteApplicationID{Context: ctx, Handler: handler}
}

/*DeleteApplicationID swagger:route DELETE /application/{id} application deleteApplicationId

Delete selected application

*/
type DeleteApplicationID struct {
	Context *middleware.Context
	Handler DeleteApplicationIDHandler
}

func (o *DeleteApplicationID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteApplicationIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil {
		// bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
