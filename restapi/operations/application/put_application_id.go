package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutApplicationIDHandlerFunc turns a function with the right signature into a put application ID handler
type PutApplicationIDHandlerFunc func(PutApplicationIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutApplicationIDHandlerFunc) Handle(params PutApplicationIDParams) middleware.Responder {
	return fn(params)
}

// PutApplicationIDHandler interface for that can handle valid put application ID params
type PutApplicationIDHandler interface {
	Handle(PutApplicationIDParams) middleware.Responder
}

// NewPutApplicationID creates a new http.Handler for the put application ID operation
func NewPutApplicationID(ctx *middleware.Context, handler PutApplicationIDHandler) *PutApplicationID {
	return &PutApplicationID{Context: ctx, Handler: handler}
}

/*PutApplicationID swagger:route PUT /application/{id} application putApplicationId

Update selected application

*/
type PutApplicationID struct {
	Context *middleware.Context
	Handler PutApplicationIDHandler
}

func (o *PutApplicationID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutApplicationIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil {
		// bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
