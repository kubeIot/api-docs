package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kubeIoT/api-docs/models"
)

/*GetApplicationIDOK Application information

swagger:response getApplicationIdOK
*/
type GetApplicationIDOK struct {
	/*
	  In: Body
	*/
	Payload *models.Application `json:"body,omitempty"`
}

// NewGetApplicationIDOK creates GetApplicationIDOK with default headers values
func NewGetApplicationIDOK() *GetApplicationIDOK {
	return &GetApplicationIDOK{}
}

// WithPayload adds the payload to the get application Id o k response
func (o *GetApplicationIDOK) WithPayload(payload *models.Application) *GetApplicationIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get application Id o k response
func (o *GetApplicationIDOK) SetPayload(payload *models.Application) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetApplicationIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetApplicationIDNotFound Application was not found

swagger:response getApplicationIdNotFound
*/
type GetApplicationIDNotFound struct {
	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetApplicationIDNotFound creates GetApplicationIDNotFound with default headers values
func NewGetApplicationIDNotFound() *GetApplicationIDNotFound {
	return &GetApplicationIDNotFound{}
}

// WithPayload adds the payload to the get application Id not found response
func (o *GetApplicationIDNotFound) WithPayload(payload *models.Error) *GetApplicationIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get application Id not found response
func (o *GetApplicationIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetApplicationIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
