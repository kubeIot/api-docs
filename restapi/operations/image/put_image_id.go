package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutImageIDHandlerFunc turns a function with the right signature into a put image ID handler
type PutImageIDHandlerFunc func(PutImageIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutImageIDHandlerFunc) Handle(params PutImageIDParams) middleware.Responder {
	return fn(params)
}

// PutImageIDHandler interface for that can handle valid put image ID params
type PutImageIDHandler interface {
	Handle(PutImageIDParams) middleware.Responder
}

// NewPutImageID creates a new http.Handler for the put image ID operation
func NewPutImageID(ctx *middleware.Context, handler PutImageIDHandler) *PutImageID {
	return &PutImageID{Context: ctx, Handler: handler}
}

/*PutImageID swagger:route PUT /image/{id} image putImageId

Updates the image

*/
type PutImageID struct {
	Context *middleware.Context
	Handler PutImageIDHandler
}

func (o *PutImageID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutImageIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil {
		// bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
