package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostImageHandlerFunc turns a function with the right signature into a post image handler
type PostImageHandlerFunc func(PostImageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostImageHandlerFunc) Handle(params PostImageParams) middleware.Responder {
	return fn(params)
}

// PostImageHandler interface for that can handle valid post image params
type PostImageHandler interface {
	Handle(PostImageParams) middleware.Responder
}

// NewPostImage creates a new http.Handler for the post image operation
func NewPostImage(ctx *middleware.Context, handler PostImageHandler) *PostImage {
	return &PostImage{Context: ctx, Handler: handler}
}

/*PostImage swagger:route POST /image image postImage

Create new image in Registry

*/
type PostImage struct {
	Context *middleware.Context
	Handler PostImageHandler
}

func (o *PostImage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostImageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil {
		// bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
