package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kubeIoT/api-docs/models"
)

/*GetImageOK List of images

swagger:response getImageOK
*/
type GetImageOK struct {
	/*
	  In: Body
	*/
	Payload []*models.Image `json:"body,omitempty"`
}

// NewGetImageOK creates GetImageOK with default headers values
func NewGetImageOK() *GetImageOK {
	return &GetImageOK{}
}

// WithPayload adds the payload to the get image o k response
func (o *GetImageOK) WithPayload(payload []*models.Image) *GetImageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get image o k response
func (o *GetImageOK) SetPayload(payload []*models.Image) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetImageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.Image, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetImageForbidden User  is unauthorized

swagger:response getImageForbidden
*/
type GetImageForbidden struct {
	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetImageForbidden creates GetImageForbidden with default headers values
func NewGetImageForbidden() *GetImageForbidden {
	return &GetImageForbidden{}
}

// WithPayload adds the payload to the get image forbidden response
func (o *GetImageForbidden) WithPayload(payload *models.Error) *GetImageForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get image forbidden response
func (o *GetImageForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetImageForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
