package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kubeIoT/api-docs/models"
)

/*GetImageIDOK Found image

swagger:response getImageIdOK
*/
type GetImageIDOK struct {
	/*
	  In: Body
	*/
	Payload *models.Image `json:"body,omitempty"`
}

// NewGetImageIDOK creates GetImageIDOK with default headers values
func NewGetImageIDOK() *GetImageIDOK {
	return &GetImageIDOK{}
}

// WithPayload adds the payload to the get image Id o k response
func (o *GetImageIDOK) WithPayload(payload *models.Image) *GetImageIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get image Id o k response
func (o *GetImageIDOK) SetPayload(payload *models.Image) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetImageIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetImageIDNotFound Image was not found

swagger:response getImageIdNotFound
*/
type GetImageIDNotFound struct {
	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetImageIDNotFound creates GetImageIDNotFound with default headers values
func NewGetImageIDNotFound() *GetImageIDNotFound {
	return &GetImageIDNotFound{}
}

// WithPayload adds the payload to the get image Id not found response
func (o *GetImageIDNotFound) WithPayload(payload *models.Error) *GetImageIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get image Id not found response
func (o *GetImageIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetImageIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
