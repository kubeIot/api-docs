package capability

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutCapabilityIDHandlerFunc turns a function with the right signature into a put capability ID handler
type PutCapabilityIDHandlerFunc func(PutCapabilityIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutCapabilityIDHandlerFunc) Handle(params PutCapabilityIDParams) middleware.Responder {
	return fn(params)
}

// PutCapabilityIDHandler interface for that can handle valid put capability ID params
type PutCapabilityIDHandler interface {
	Handle(PutCapabilityIDParams) middleware.Responder
}

// NewPutCapabilityID creates a new http.Handler for the put capability ID operation
func NewPutCapabilityID(ctx *middleware.Context, handler PutCapabilityIDHandler) *PutCapabilityID {
	return &PutCapabilityID{Context: ctx, Handler: handler}
}

/*PutCapabilityID swagger:route PUT /capability/{id} capability putCapabilityId

Updates the capability

*/
type PutCapabilityID struct {
	Context *middleware.Context
	Handler PutCapabilityIDHandler
}

func (o *PutCapabilityID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutCapabilityIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil {
		// bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
