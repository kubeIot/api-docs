package capability

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetCapabilityHandlerFunc turns a function with the right signature into a get capability handler
type GetCapabilityHandlerFunc func(GetCapabilityParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCapabilityHandlerFunc) Handle(params GetCapabilityParams) middleware.Responder {
	return fn(params)
}

// GetCapabilityHandler interface for that can handle valid get capability params
type GetCapabilityHandler interface {
	Handle(GetCapabilityParams) middleware.Responder
}

// NewGetCapability creates a new http.Handler for the get capability operation
func NewGetCapability(ctx *middleware.Context, handler GetCapabilityHandler) *GetCapability {
	return &GetCapability{Context: ctx, Handler: handler}
}

/*GetCapability swagger:route GET /capability capability getCapability

Get the capabilities in Registry

*/
type GetCapability struct {
	Context *middleware.Context
	Handler GetCapabilityHandler
}

func (o *GetCapability) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetCapabilityParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil {
		// bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
