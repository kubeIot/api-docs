package capability

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostCapabilityHandlerFunc turns a function with the right signature into a post capability handler
type PostCapabilityHandlerFunc func(PostCapabilityParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCapabilityHandlerFunc) Handle(params PostCapabilityParams) middleware.Responder {
	return fn(params)
}

// PostCapabilityHandler interface for that can handle valid post capability params
type PostCapabilityHandler interface {
	Handle(PostCapabilityParams) middleware.Responder
}

// NewPostCapability creates a new http.Handler for the post capability operation
func NewPostCapability(ctx *middleware.Context, handler PostCapabilityHandler) *PostCapability {
	return &PostCapability{Context: ctx, Handler: handler}
}

/*PostCapability swagger:route POST /capability capability postCapability

Create new capability in Registry

*/
type PostCapability struct {
	Context *middleware.Context
	Handler PostCapabilityHandler
}

func (o *PostCapability) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostCapabilityParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil {
		// bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
