package capability

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteCapabilityIDHandlerFunc turns a function with the right signature into a delete capability ID handler
type DeleteCapabilityIDHandlerFunc func(DeleteCapabilityIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteCapabilityIDHandlerFunc) Handle(params DeleteCapabilityIDParams) middleware.Responder {
	return fn(params)
}

// DeleteCapabilityIDHandler interface for that can handle valid delete capability ID params
type DeleteCapabilityIDHandler interface {
	Handle(DeleteCapabilityIDParams) middleware.Responder
}

// NewDeleteCapabilityID creates a new http.Handler for the delete capability ID operation
func NewDeleteCapabilityID(ctx *middleware.Context, handler DeleteCapabilityIDHandler) *DeleteCapabilityID {
	return &DeleteCapabilityID{Context: ctx, Handler: handler}
}

/*DeleteCapabilityID swagger:route DELETE /capability/{id} capability deleteCapabilityId

Deletes the capability

*/
type DeleteCapabilityID struct {
	Context *middleware.Context
	Handler DeleteCapabilityIDHandler
}

func (o *DeleteCapabilityID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteCapabilityIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil {
		// bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
