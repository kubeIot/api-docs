package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// Device device
// swagger:model device
type Device struct {
	// address
	Address string `json:"address,omitempty"`

	// applications
	Applications []int64 `json:"applications"`

	// device vendor
	DeviceVendor string `json:"device_vendor,omitempty"`

	// device version
	DeviceVersion string `json:"device_version,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// installed capabilities
	InstalledCapabilities []int64 `json:"installed_capabilities"`

	// kernel version
	KernelVersion string `json:"kernel_version,omitempty"`

	// number of applications
	NumberOfApplications int64 `json:"number_of_applications,omitempty"`

	// os distribution
	OsDistribution string `json:"os_distribution,omitempty"`

	// System id of user owning device
	Owner int64 `json:"owner,omitempty"`

	// system info
	SystemInfo string `json:"system_info,omitempty"`

	// used capabilities
	UsedCapabilities []*DeviceUsedCapabilitiesItems0 `json:"used_capabilities"`
}

// Validate validates this device
func (m *Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstalledCapabilities(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsedCapabilities(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Device) validateApplications(formats strfmt.Registry) error {

	if swag.IsZero(m.Applications) {
		// not required
		return nil
	}

	return nil
}

func (m *Device) validateInstalledCapabilities(formats strfmt.Registry) error {

	if swag.IsZero(m.InstalledCapabilities) {
		// not required
		return nil
	}

	return nil
}

func (m *Device) validateUsedCapabilities(formats strfmt.Registry) error {

	if swag.IsZero(m.UsedCapabilities) {
		// not required
		return nil
	}

	for i := 0; i < len(m.UsedCapabilities); i++ {

		if swag.IsZero(m.UsedCapabilities[i]) {
			// not required
			continue
		}

		if m.UsedCapabilities[i] != nil {

			if err := m.UsedCapabilities[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// DeviceUsedCapabilitiesItems0 device used capabilities items0
// swagger:model DeviceUsedCapabilitiesItems0
type DeviceUsedCapabilitiesItems0 struct {
	// application id
	ApplicationID int64 `json:"application_id,omitempty"`

	// capability id
	CapabilityID int64 `json:"capability_id,omitempty"`
}

// Validate validates this device used capabilities items0
func (m *DeviceUsedCapabilitiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
